<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnAcceder.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        qZcXFui/AP9k+s9D+LJvAAAAAElFTkSuQmCC
</value>
  </data>
</root>